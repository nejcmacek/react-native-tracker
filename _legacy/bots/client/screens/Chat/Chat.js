import * as React from 'react';
import { Component } from 'react';
import { Text, View, StyleSheet, TextInput, Button, ScrollView, ListView, Alert } from 'react-native';
import * as defaults from '../../screens/helpers/defaults';
import MessageItem from "../../components/MessageItem/MessageItem";
export default class Chat extends Component {
    constructor(props) {
        super(props);
        this.state = {
            loading: true,
            error: null,
            msgs: null,
            msgsDs: null,
            message: "",
            sending: false
        };
        this.loadData();
    }
    updateMsgs(msgs) {
        const ds = new ListView.DataSource({ rowHasChanged: (r1, r2) => r1 !== r2 });
        this.setState({
            msgs,
            msgsDs: ds.cloneWithRows(msgs),
            loading: false,
            error: null
        });
    }
    async loadData() {
        const { identity, con } = this.props.navigation.state.params;
        try {
            const msgs = await identity.get(`/api/history/?bot=${con.id}`);
            this.updateMsgs(msgs);
        }
        catch (ex) {
            this.setState({ loading: false, error: ex.message || ex });
        }
    }
    load() {
        this.setState({ loading: true, error: null });
        this.loadData();
    }
    async send() {
        const message = this.state.message.trim();
        if (!message) {
            this.setState({ message: "" });
            return;
        }
        this.setState({ sending: true });
        const { con, identity } = this.props.navigation.state.params;
        try {
            const response = await identity.post('/api/chat/', {
                message,
                bot: con.id
            });
            const { msgs } = this.state;
            msgs.push(...response);
            this.updateMsgs(msgs);
            this.setState({ sending: false, message: "" });
        }
        catch (ex) {
            Alert.alert("An Error has Occurred", ex.message || ex || "Unknown error.", [{
                    text: "Okay"
                }]);
            this.setState({ sending: false });
        }
    }
    isFlatTop(index) {
        const { msgs } = this.state;
        const prev = msgs[index - 1];
        if (!prev)
            return false;
        const msg = msgs[index];
        return msg.sender === prev.sender;
    }
    isFlatBottom(index) {
        const { msgs } = this.state;
        const next = msgs[Number(index) + 1];
        if (!next)
            return false;
        const msg = msgs[index];
        return msg.sender === next.sender;
    }
    render() {
        const { error, loading } = this.state;
        if (error) {
            return (React.createElement(View, { style: { padding: 16 } },
                React.createElement(Text, { style: { marginBottom: 8 } },
                    "Error: ",
                    error),
                React.createElement(Button, { title: "Reload", color: defaults.accent, onPress: () => this.load() })));
        }
        if (loading) {
            return (React.createElement(Text, { style: { padding: 16 } }, "Loading..."));
        }
        return (React.createElement(View, { style: styles.holder },
            React.createElement(View, { style: styles.msgHolder },
                React.createElement(ScrollView, { style: { flexWrap: 'nowrap', marginBottom: 48 }, ref: ref => this.scrollView = ref, onContentSizeChange: (contentWidth, contentHeight) => {
                        this.scrollView.scrollTo({ y: contentHeight, animated: true });
                    } },
                    React.createElement(ListView, { enableEmptySections: true, style: { paddingTop: 8 }, ref: component => this._root = component, dataSource: this.state.msgsDs, renderRow: (rowData, sectionId, rowId) => (React.createElement(MessageItem, { msg: rowData, flatBottom: this.isFlatBottom(rowId), flatTop: this.isFlatTop(rowId) })) }))),
            React.createElement(View, { style: styles.inputHolder },
                React.createElement(View, { style: styles.inputHolderInner },
                    React.createElement(TextInput, { style: styles.input, underlineColorAndroid: "#eee", multiline: false, placeholder: "Enter message", autoCorrect: true, value: this.state.message, editable: !this.state.sending, onChangeText: message => this.setState({ message }), onSubmitEditing: () => this.send() }),
                    React.createElement(View, { style: styles.button },
                        React.createElement(Button, { title: "Send", onPress: () => this.send(), color: defaults.accent, disabled: this.state.sending }))))));
    }
}
Chat.navigationOptions = ({ navigation }) => ({
    title: `Chat`
});
const styles = StyleSheet.create({
    holder: {
        flex: 1
    },
    msgHolder: {
        flexGrow: 1
    },
    inputHolder: {
        backgroundColor: 'white',
        paddingLeft: 8,
        paddingRight: 8,
        position: 'absolute',
        bottom: 0,
        left: 0,
        right: 0,
        height: 48
    },
    inputHolderInner: {
        flexDirection: 'row',
        justifyContent: 'space-around',
        alignContent: 'center',
        alignItems: 'center'
    },
    input: {
        flexGrow: 1,
        marginRight: 16
    },
    button: {
        borderRadius: 16
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hhdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkNoYXQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFBO0FBQzlCLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxPQUFPLENBQUE7QUFDakMsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFzQixRQUFRLEVBQUUsS0FBSyxFQUFFLE1BQU0sY0FBYyxDQUFBO0FBRXpILE9BQU8sS0FBSyxRQUFRLE1BQU0sZ0NBQWdDLENBQUM7QUFDM0QsT0FBTyxXQUFXLE1BQU0sMENBQTBDLENBQUM7QUFpQm5FLE1BQU0sQ0FBQyxPQUFPLFdBQVksU0FBUSxTQUEyQjtJQVM1RCxZQUFZLEtBQUs7UUFDaEIsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQ1osSUFBSSxDQUFDLEtBQUssR0FBRztZQUNaLE9BQU8sRUFBRSxJQUFJO1lBQ2IsS0FBSyxFQUFFLElBQUk7WUFDWCxJQUFJLEVBQUUsSUFBSTtZQUNWLE1BQU0sRUFBRSxJQUFJO1lBQ1osT0FBTyxFQUFFLEVBQUU7WUFDWCxPQUFPLEVBQUUsS0FBSztTQUNkLENBQUE7UUFDRCxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUE7SUFDaEIsQ0FBQztJQUVELFVBQVUsQ0FBQyxJQUFlO1FBQ3pCLE1BQU0sRUFBRSxHQUFHLElBQUksUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFFLGFBQWEsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDN0UsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUNiLElBQUk7WUFDSixNQUFNLEVBQUUsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUM7WUFDOUIsT0FBTyxFQUFFLEtBQUs7WUFDZCxLQUFLLEVBQUUsSUFBSTtTQUNYLENBQUMs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