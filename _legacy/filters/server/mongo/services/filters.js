"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../util");
const config_1 = require("../config");
class FilterService {
    constructor(db, eh) {
        this.db = db;
        this.eh = eh;
        this.getAll = () => this.filters.find({}).toArray();
        this.get = (userId) => this.filters.findOne({ user: util_1.idToString(userId) });
        this.set = (f) => this.filters.updateOne({ user: f.user }, f)
            .then(t => !!t.result.n);
        this.exists = (userId) => this.get(util_1.idToString(userId)).then(t => !!t);
        this.register = async (f) => {
            if (await this.exists(f.user))
                return null;
            else
                return await this.filters.insertOne(f)
                    .then(t => !!t.result.n);
        };
        this.update = (f) => this.filters.replaceOne({ user: f.user }, f)
            .then(t => !!t.result.n);
        this.updateOrRegister = (f) => this.filters.replaceOne({ user: f.user }, f, { upsert: true })
            .then(t => !!t.result.n);
        this.addFilter = async (userId, filter) => {
            const f = await this.get(util_1.idToString(userId));
            if (!f.filters.every(t => t.title != filter.title))
                throw new Error("Title already taken.");
            f.filters.push(filter);
            return await this.update(f);
        };
        this.changeFilter = async (userId, filter) => {
            const f = await this.get(util_1.idToString(userId));
            const ff = f.filters.filter(t => t.title != filter.title);
            if (f.filters.length === ff.length)
                throw new Error("Filter does not exist.");
            ff.push(filter);
            f.filters = ff;
            return await this.update(f);
        };
        this.removeFilter = async (userId, title) => {
            const f = await this.get(util_1.idToString(userId));
            if (!f)
                return false;
            const newFilters = f.filters.filter(t => t.title !== title);
            if (newFilters.length === f.filters.length)
                return false;
            f.filters = newFilters;
            return await this.update(f);
        };
        this.removeFitlerAt = async (userId, filterIndex) => {
            const f = await this.get(util_1.idToString(userId));
            if (f && filterIndex >= f.filters.length)
                return false;
            f.filters.splice(filterIndex, 1);
            return await this.update(f);
        };
        this.removeFilters = async (userId) => this.filters.updateOne({ user: util_1.idToString(userId) }, { filters: [] })
            .then(t => !!t.result.n);
        this.remove = (userId) => this.filters.remove({ user: util_1.idToString(userId) })
            .then(t => !!t.result.n);
        this.filters = db.collection(config_1.default.collections.filters);
        this.eh.on("user-added", e => this.register(FilterService.defaultFilterCollection(e.id)));
        this.eh.on("user-removed", e => this.remove(e.id));
    }
    static defaultFilterCollection(id) {
        return {
            user: id,
            filters: []
        };
    }
}
exports.default = FilterService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImZpbHRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxrQ0FBK0M7QUFFL0Msc0NBQThCO0FBRzlCO0lBSUMsWUFBb0IsRUFBTSxFQUFVLEVBQWdCO1FBQWhDLE9BQUUsR0FBRixFQUFFLENBQUk7UUFBVSxPQUFFLEdBQUYsRUFBRSxDQUFjO1FBYXBELFdBQU0sR0FBRyxNQUNSLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFtQyxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUVsRSxRQUFHLEdBQUcsQ0FBQyxNQUF5QixLQUMvQixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBbUMsRUFBRSxJQUFJLEVBQUUsaUJBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUE7UUFFckYsUUFBRyxHQUFHLENBQUMsQ0FBbUIsS0FDekIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQzthQUN6QyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBRTFCLFdBQU0sR0FBRyxDQUFDLE1BQXlCLEtBQ2xDLElBQUksQ0FBQyxHQUFHLENBQUMsaUJBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBRTVDLGFBQVEsR0FBRyxLQUFLLEVBQUUsQ0FBbUI7WUFDcEMsRUFBRSxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDN0IsTUFBTSxDQUFDLElBQUksQ0FBQTtZQUNaLElBQUk7Z0JBQ0gsTUFBTSxDQUFDLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxT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